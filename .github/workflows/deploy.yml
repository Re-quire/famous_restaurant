name: Build and Deploy to EC2

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/yummy_server:${{ github.sha }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/yummy_server:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/yummy_server:latest

      - name: Push Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/yummy_server:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/yummy_server:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push-docker

    steps:
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # `application.yml` 파일 생성
            echo "spring:" > /home/ubuntu/app/yummy-server/application.yml
            echo "  profiles:" >> /home/ubuntu/app/yummy-server/application.yml
            echo "    active: dev" >> /home/ubuntu/app/yummy-server/application.yml
            echo "server:" >> /home/ubuntu/app/yummy-server/application.yml
            echo "  port: 8080" >> /home/ubuntu/app/yummy-server/application.yml

            # DB 설정 추가
            echo "spring:" >> /home/ubuntu/app/yummy-server/application.yml
            echo "  datasource:" >> /home/ubuntu/app/yummy-server/application.yml
            echo "    url: ${DB_URL}" >> /home/ubuntu/app/yummy-server/application.yml
            echo "    username: ${DB_USERNAME}" >> /home/ubuntu/app/yummy-server/application.yml
            echo "    password: ${DB_PASSWORD}" >> /home/ubuntu/app/yummy-server/application.yml
            echo "    driver-class-name: com.mysql.cj.jdbc.Driver" >> /home/ubuntu/app/yummy-server/application.yml

            # 기존 컨테이너 중단 및 삭제
            docker-compose -f /home/ubuntu/app/yummy-server/docker-compose.yml down

            # 최신 Docker 이미지 Pull
            docker-compose -f /home/ubuntu/app/yummy-server/docker-compose.yml pull

            # 컨테이너 다시 실행
            docker-compose -f /home/ubuntu/app/yummy-server/docker-compose.yml up -d
